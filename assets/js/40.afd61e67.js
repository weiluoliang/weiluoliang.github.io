(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{397:function(a,t,v){"use strict";v.r(t);var _=v(15),r=Object(_.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"前言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),t("p",[a._v("垃圾的定义： 不再被引用的对象就是垃圾。\n那如何判断一个对象是否被引用呢？")]),a._v(" "),t("ul",[t("li",[a._v("引用计数法 用一个标记记录引用次数，当引用次数为0时，就是垃圾")]),a._v(" "),t("li",[a._v("可达性分析法 从GC Roots开始，遍历所有对象，如果对象不可达，就是垃圾。")])]),a._v(" "),t("h2",{attrs:{id:"垃圾回收算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收算法"}},[a._v("#")]),a._v(" 垃圾回收算法")]),a._v(" "),t("ul",[t("li",[a._v("标记-清除算法\n先标记好回收的对象，然后统一回收")]),a._v(" "),t("li",[a._v("标记-压缩算法\n标记好回收的对象，然后将存活的对象压缩到一端，然后回收另一端的空间")]),a._v(" "),t("li",[a._v("复制算法\n将内存分为两块，每次只使用一块，当这一块满了，就将存活的对象复制到另一块，然后回收这一块")]),a._v(" "),t("li",[a._v("分代算法\n根据对象的存活周期将内存分为不同的区域，然后根据不同的区域使用不同的算法")])]),a._v(" "),t("h2",{attrs:{id:"垃圾回收器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收器"}},[a._v("#")]),a._v(" 垃圾回收器")]),a._v(" "),t("p",[a._v("垃圾回收器是实现垃圾回收算法的具体实现，根据不同的算法和实现，可以分为以下几种 先看一张图，了解一下各个垃圾回收器的关系")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://images.luoliang.top/jvm_%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%9F.png",alt:"img"}})]),a._v(" "),t("h3",{attrs:{id:"serial收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serial收集器"}},[a._v("#")]),a._v(" Serial收集器")]),a._v(" "),t("p",[a._v("在新生代使用复制算法，在老年代使用标记-清除算法")]),a._v(" "),t("ul",[t("li",[a._v("使用单线程进行回收")])]),a._v(" "),t("p",[a._v("优点：简单高效，没有线程切换的开销\n缺点：无法充分利用多核CPU")]),a._v(" "),t("h3",{attrs:{id:"parnew收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parnew收集器"}},[a._v("#")]),a._v(" ParNew收集器")]),a._v(" "),t("p",[a._v("使用复制算法，多线程进行回收，可以和CMS收集器配合使用")]),a._v(" "),t("h3",{attrs:{id:"parallel-scavenge收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parallel-scavenge收集器"}},[a._v("#")]),a._v(" Parallel Scavenge收集器")]),a._v(" "),t("p",[a._v("使用复制算法，多线程进行回收")]),a._v(" "),t("h3",{attrs:{id:"serial-old收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#serial-old收集器"}},[a._v("#")]),a._v(" Serial Old收集器")]),a._v(" "),t("p",[a._v("用于老年代的收集器，使用标记-清除算法")]),a._v(" "),t("h3",{attrs:{id:"parallel-old收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#parallel-old收集器"}},[a._v("#")]),a._v(" Parallel Old收集器")]),a._v(" "),t("h3",{attrs:{id:"cms收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cms收集器"}},[a._v("#")]),a._v(" CMS收集器")]),a._v(" "),t("p",[a._v("CMS(Concurrent Mark Sweep)收集器，是一种以获取最短回收停顿时间为目标的收集器. 使用标记-清除算法，分为以下几个阶段")]),a._v(" "),t("ul",[t("li",[a._v("初始标记 标记GC Roots能直接关联到的对象(STW)")]),a._v(" "),t("li",[a._v("并发标记 标记所有对象")]),a._v(" "),t("li",[a._v("重新标记 修正并发标记期间因用户程序继续运行导致标记产生变动的对象(STW)")]),a._v(" "),t("li",[a._v("并发清除 清除对象")]),a._v(" "),t("li",[a._v("并发清理 清理对象")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://images.luoliang.top/jvm_cms%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E8%BF%87%E7%A8%8B.jpeg",alt:"img"}})]),a._v(" "),t("h3",{attrs:{id:"g1收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1收集器"}},[a._v("#")]),a._v(" G1收集器")]),a._v(" "),t("p",[a._v("G1 (Garbage-First)收集器，最大的特点是可以设置期望停顿时间，然后在这个时间内尽可能多的进行垃圾回收。 不再区分新生代和老年代，而是将内存分为多个区域，每个区域都可以是新生代或者老年代。")]),a._v(" "),t("p",[a._v("region的类型有以下几种:")]),a._v(" "),t("ul",[t("li",[a._v("Eden 堆内存默认占比 5%")]),a._v(" "),t("li",[a._v("Survivor 新生代存货区")]),a._v(" "),t("li",[a._v("Old 老年代区域")]),a._v(" "),t("li",[a._v("Humongous 超过region50%大小的对象被确认为大对象，会被放到Humongous区域")])]),a._v(" "),t("h4",{attrs:{id:"垃圾回收过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收过程"}},[a._v("#")]),a._v(" 垃圾回收过程")]),a._v(" "),t("ul",[t("li",[a._v("初始标记 标记GC Roots能直接关联到的对象(STW)")]),a._v(" "),t("li",[a._v("并发标记 标记所有对象")]),a._v(" "),t("li",[a._v("最终标记 修正并发标记期间因用户程序继续运行导致标记产生变动的对象(STW)")]),a._v(" "),t("li",[a._v("筛选回收 选择回收对象")])]),a._v(" "),t("p",[t("img",{attrs:{src:"https://images.luoliang.top/jvm_g1_%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E8%BF%87%E7%A8%8B.png",alt:"img"}})]),a._v(" "),t("h4",{attrs:{id:"g1收集器的优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#g1收集器的优点"}},[a._v("#")]),a._v(" G1收集器的优点")]),a._v(" "),t("ul",[t("li",[a._v("并行与并发 G1在并行处理的同时，也能与应用程序并发执行，充分利用多核CPU")]),a._v(" "),t("li",[a._v("分代收集 G1不再区分新生代和老年代，而是将内存分为多个区域，每个区域都可以是新生代或者老年代")]),a._v(" "),t("li",[a._v("空间整合 G1收集器会进行空间整合，减少内存碎片")]),a._v(" "),t("li",[a._v("可预测的停顿 G1可以设置期望停顿时间，然后在这个时间内尽可能多的进行垃圾回收")])]),a._v(" "),t("h4",{attrs:{id:"垃圾收集分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#垃圾收集分类"}},[a._v("#")]),a._v(" 垃圾收集分类")]),a._v(" "),t("ul",[t("li",[a._v("Young GC\n并不是Eden区满了马上出发Young GC，而是会去计算Eden去回收大概要多久时间，如果远远小于期望停顿时间，而是增加Eden区的使用，等到下一次Eden区满了,再计算一次，如果大于期望停顿时间，就会触发Young GC。")]),a._v(" "),t("li",[a._v("Mixed GC 老年代的堆占有率达到设置的值(-XX:InitiatingHeapOccupancyPercent)则触发Mixed GC，回收所有的Young和部分old（根据预期停顿时间）和大对象，一般会先做mixed GC，使用复制算法进行， 把region中的存活对象复制到其他region中，然后清理掉这个region，这样可以减少碎片，如果没有足够的内存存放这些对象则会触发Full GC。")]),a._v(" "),t("li",[a._v("Full GC 使用单线程进行，系统会停止所有的应用线程，进行垃圾回收，这个过程会比较长，会导致系统停顿。使用标记-清除算法，然后进行空间整理。")])]),a._v(" "),t("h4",{attrs:{id:"核心参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#核心参数"}},[a._v("#")]),a._v(" 核心参数")]),a._v(" "),t("ul",[t("li",[a._v("-XX:+UseG1GC:使用G1收集器")]),a._v(" "),t("li",[a._v("-XX:MaxGCPauseMillis 设置期望停顿时间")]),a._v(" "),t("li",[a._v("-XX:G1HeapRegionSize 设置region的大小")]),a._v(" "),t("li",[a._v("-XX:InitiatingHeapOccupancyPercent 设置老年代的堆占有率达到多少时触发Mixed GC")]),a._v(" "),t("li",[a._v("-XX:G1MixedGCLiveThresholdPercent 设置Mixed GC后存活对象占比多少时触发Full GC")])]),a._v(" "),t("h3",{attrs:{id:"zgc收集器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#zgc收集器"}},[a._v("#")]),a._v(" ZGC收集器")]),a._v(" "),t("p",[a._v("优点：")]),a._v(" "),t("ul",[t("li",[a._v("GC时间能控制在10ms范围内")]),a._v(" "),t("li",[a._v("GC时长只跟GC Roots有关，跟存活对象没有关系")])]),a._v(" "),t("p",[a._v("关键技术：")]),a._v(" "),t("ul",[t("li",[a._v("着色指针")]),a._v(" "),t("li",[a._v("读屏障")])]),a._v(" "),t("h4",{attrs:{id:"设计目标"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计目标"}},[a._v("#")]),a._v(" 设计目标")]),a._v(" "),t("ul",[t("li",[a._v("停顿时间不超过10ms")]),a._v(" "),t("li",[a._v("停顿时间不会随着堆内存的增加而增加")]),a._v(" "),t("li",[a._v("支持TB级别的堆内存（8MB~4TB）")])]),a._v(" "),t("h2",{attrs:{id:"参考"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://tech.meituan.com/2020/08/06/new-zgc-practice-in-meituan.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("美团技术-新一代垃圾回收器ZGC的探索与实践"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://tech.meituan.com/2016/09/23/g1.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("美团技术-Java Hotspot G1 GC的一些关键技术"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://tech.meituan.com/2020/11/12/java-9-cms-gc.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java中9种常见的CMS GC问题分析与解决"),t("OutboundLink")],1)]),a._v(" "),t("li",[t("a",{attrs:{href:"https://tech.meituan.com/2017/12/29/jvm-optimize.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("从实际案例聊聊Java应用的GC优化"),t("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=r.exports}}]);