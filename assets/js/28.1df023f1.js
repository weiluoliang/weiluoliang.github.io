(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{385:function(a,r,t){"use strict";t.r(r);var s=t(15),n=Object(s.a)({},(function(){var a=this,r=a._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[r("h2",{attrs:{id:"spring的生命周期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring的生命周期"}},[a._v("#")]),a._v(" Spring的生命周期")]),a._v(" "),r("p",[a._v("Spring的生命周期就是从Spring 创建Bean，Bean使用，Bean销毁的整个过程。创建Bean是其中最复杂的过程，要解决很多问题，比如环境变量，Bean定义描述，Bean创建的方式（使用工厂还是其他构造函数，构造函数有多个选用哪个一个），创建的过程要进行动态代理，创建的过程可能会有循环引用又该如何解决？会有一系列的问题需要处理。  使用的过程就比较简单，就是调用Bean的方法完成业务，销毁的时候如果Bean有实现了destroy方法或者有"),r("code",[a._v("@PreDestroy")]),a._v("注解的话将会调用这个方法。"),r("strong",[a._v("我们重点学习Bean的创建过程")]),a._v("。")]),a._v(" "),r("h3",{attrs:{id:"bean的创建过程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#bean的创建过程"}},[a._v("#")]),a._v(" Bean的创建过程")]),a._v(" "),r("p",[r("img",{attrs:{src:"https://images.luoliang.top/spring-01.jpg",alt:""}})]),a._v(" "),r("h2",{attrs:{id:"spring是如何解决循环依赖问题"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring是如何解决循环依赖问题"}},[a._v("#")]),a._v(" Spring是如何解决循环依赖问题")]),a._v(" "),r("h2",{attrs:{id:"spring的扩展点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring的扩展点"}},[a._v("#")]),a._v(" Spring的扩展点")]),a._v(" "),r("h2",{attrs:{id:"spring的事件机制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring的事件机制"}},[a._v("#")]),a._v(" Spring的事件机制")]),a._v(" "),r("h2",{attrs:{id:"spring-aop"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring-aop"}},[a._v("#")]),a._v(" Spring AOP")]),a._v(" "),r("h2",{attrs:{id:"spring事务管理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#spring事务管理"}},[a._v("#")]),a._v(" Spring事务管理")])])}),[],!1,null,null,null);r.default=n.exports}}]);